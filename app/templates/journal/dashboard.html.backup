{% extends "base_authenticated.html" %}
{% load static %}

{% block title %}Dashboard{% endblock %}

{% block content %}
{% csrf_token %}
<div class="container-fluid vh-100 d-flex">
    <!-- Sidebar -->
    <aside class="bg-light border-end" style="width: 300px; min-width: 300px;">
        <div class="d-flex flex-column h-100 p-4 overflow-auto">
            <!-- New Entry Button -->
            <div class="mb-4">
                <a href="{% url 'journal:new_entry' %}" class="btn btn-primary w-100">
                    <i class="bi bi-plus-circle me-2"></i>New Entry
                </a>
            </div>

        <!-- Search Bar -->
        <div class="search-section">
            <form action="{% url 'journal:entry_list' %}" method="get">
                <div class="input-group">
                    <input type="text" name="search" class="form-control" placeholder="Search entries..." value="{{ request.GET.search }}">
                    <button type="submit" class="btn btn-outline-secondary">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </form>
        </div>

            <!-- Recent Entries -->
            <div class="mb-4 flex-grow-1">
                <h5 class="mb-3">Recent Entries</h5>
                <ul class="list-group list-group-flush">
                    {% for entry in recent_entries %}
                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 entry-item {% if current_entry and entry.id == current_entry.id %}active{% endif %}" data-entry-id="{{ entry.id }}">
                        <a href="#" class="text-decoration-none flex-grow-1 me-2 entry-link" onclick="loadEntry({{ entry.id }})">
                            <div class="entry-title">{{ entry.title|truncatechars:30 }}</div>
                            <small class="text-muted">{{ entry.updated_at|date:"M d, H:i" }}</small>
                        </a>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary opacity-0 entry-options" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-three-dots"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="deleteEntry('{{ entry.id }}')">Delete</a></li>
                            </ul>
                        </div>
                    </li>
                    {% endfor %}
                </ul>
                <a href="{% url 'journal:entry_list' %}" class="btn btn-link text-primary p-0">More</a>
            </div>

            <!-- Tags Button -->
            <div class="mb-4">
                <a href="{% url 'journal:tag_list' %}" class="btn btn-outline-primary w-100">
                    <i class="bi bi-tags me-2"></i>Tags
                </a>
            </div>

            <!-- Profile Section -->
            <div class="mt-auto pt-4 border-top">
                <div class="mb-3">
                    <strong>{{ user.username }}</strong>
                    <p class="text-muted mb-0 small">{{ user.email }}</p>
                </div>
                <div class="d-flex flex-column gap-2">
                    <a href="{% url 'authentication:profile' %}" class="btn btn-link text-primary p-0 text-start">Edit Profile</a>
                    <a href="{% url 'authentication:logout' %}" class="btn btn-link text-primary p-0 text-start">Logout</a>
                </div>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-grow-1 d-flex flex-column p-4 overflow-auto">
        <div class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
            <h1 class="mb-0">Dashboard</h1>
            {% if current_entry %}
            <button type="button" class="btn btn-success" id="save-btn">
                <i class="bi bi-check-circle me-2"></i>Save
            </button>
            {% endif %}
        </div>

        <div class="flex-grow-1 d-flex flex-column">
            {% if current_entry %}
            <form id="dashboard-form">
                {% csrf_token %}
                <div class="d-flex flex-column h-100">
                    <input type="text" class="form-control form-control-lg border mb-4" id="entry-title" value="{{ current_entry.title }}" placeholder="Entry title...">
                    <div class="border rounded p-4 flex-grow-1 overflow-auto bg-white" id="editorjs-container">
                        <div id="editorjs"></div>
                    </div>
                    <input type="hidden" id="content" name="content">
                </div>
            </form>
            {% else %}
            <div class="d-flex flex-column align-items-center justify-content-center h-100 text-center">
                <h3>Welcome to your Dashboard</h3>
                <p class="text-muted mb-4">You haven't created any journal entries yet.</p>
                <a href="{% url 'journal:new_entry' %}" class="btn btn-primary">Create Your First Entry</a>
            </div>
            {% endif %}
        </div>
    </main>
</div>
{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'css/editorjs.css' %}">
<style>
/* Active entry highlighting */
.entry-item.active {
    background-color: #e3f2fd;
    border-left: 4px solid #2196f3;
}

.entry-item.active .entry-title {
    font-weight: 600;
    color: #1976d2;
}

.entry-item:hover {
    background-color: #f8f9fa;
}

/* Loading state for entries */
.entry-link.disabled {
    pointer-events: none;
    opacity: 0.6;
}
</style>
{% endblock %}

{% block extra_js %}
{% if current_entry %}
{{ current_entry.content|json_script:"entry-content" }}
{% endif %}

<!-- EditorJS Core -->
<script>
    // Fallback check for EditorJS loading
    window.editorJSLoaded = false;
    window.addEventListener('load', function() {
        setTimeout(function() {
            if (typeof EditorJS !== 'undefined') {
                window.editorJSLoaded = true;
                console.log('EditorJS loaded successfully');
            } else {
                console.error('EditorJS failed to load from CDN');
            }
        }, 1000);
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@2.28.2/dist/editorjs.umd.js"></script>

<!-- EditorJS Plugins -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@2.7.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@1.8.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/checklist@1.5.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/delimiter@1.3.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/quote@2.5.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/table@2.2.2/dist/table.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/link@2.5.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/raw@2.4.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/code@2.8.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/warning@1.3.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/marker@1.3.0/dist/bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/underline@1.1.0/dist/bundle.js"></script>

<!-- EditorJS Service -->
<script src="{% static 'js/editorjs-service.js' %}"></script>

<script>
// Global variables for dashboard
let originalContent = null;

// Entry content from Django template
window.entryContent = {};

{% if current_entry %}
try {
    const raw = document.getElementById('entry-content')?.textContent || '{}';
    window.entryContent = JSON.parse(raw);
    if (typeof window.entryContent === 'string') {
        try {
            window.entryContent = JSON.parse(window.entryContent);
        } catch {
            window.entryContent = {};
        }
    }
} catch (e) {
    console.warn('Failed to parse entry content JSON, defaulting to empty.', e);
    window.entryContent = {};
}
{% endif %}

// Current entry tracking
let currentEntryId = {% if current_entry %}{{ current_entry.id }}{% else %}null{% endif %};

// Initialize dashboard when page loads
document.addEventListener('DOMContentLoaded', function() {
    {% if current_entry %}
    initializeDashboardEditor();
    {% endif %}
});

// Wait for essential EditorJS plugins to load
async function waitForPlugins() {
    const essentialPlugins = ['Header', 'List', 'Code'];
    const maxAttempts = 50; // 5 seconds max wait
    let attempts = 0;

    while (attempts < maxAttempts) {
        let allLoaded = true;

        for (const plugin of essentialPlugins) {
            if (typeof window[plugin] === 'undefined') {
                allLoaded = false;
                break;
            }
        }

        if (allLoaded) {
            console.log('All essential EditorJS plugins loaded');
            return;
        }

        attempts++;
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.warn('Some EditorJS plugins may not be loaded, but continuing with available plugins');
}

async function initializeDashboardEditor() {
    try {
        console.log('Starting dashboard editor initialization...');

        // Check if EditorJS is available
        if (typeof EditorJS === 'undefined') {
            throw new Error('EditorJS is not loaded. Please check your internet connection and refresh the page.');
        }

        // Check if service is available
        if (typeof window.editorJSService === 'undefined') {
            throw new Error('EditorJSService is not loaded. Please refresh the page.');
        }

        // Wait for essential plugins to be available
        await waitForPlugins();

        // Check if holder element exists
        const holder = document.getElementById('editorjs');
        if (!holder) {
            throw new Error('Editor holder element not found.');
        }

        console.log('All prerequisites met, initializing EditorJS...');

        // Initialize EditorJS using the service
        await window.editorJSService.initialize('editorjs', {
            initialData: window.entryContent,
            minHeight: 400,
            placeholder: 'Start writing your journal entry... Press Tab to see formatting options.',
            onChange: handleContentChange,
            onReady: () => {
                console.log('Dashboard editor ready');
                // Store original content for change detection
                originalContent = JSON.stringify(window.entryContent);
            }
        });

        console.log('EditorJS initialized successfully');

        // Initialize save button
        const saveBtn = document.getElementById('save-btn');
        if (saveBtn) {
            saveBtn.addEventListener('click', handleDashboardSave);
        }

    } catch (error) {
        console.error('Failed to initialize dashboard editor:', error);
        showErrorMessage(`Failed to load editor: ${error.message}`);
    }
}

// Load entry content dynamically
async function loadEntry(entryId) {
    try {
        // Don't reload if it's already the current entry
        if (currentEntryId === entryId) return;

        // Show loading state
        const entryTitle = document.getElementById('entry-title');
        const saveBtn = document.getElementById('save-btn');
        if (entryTitle) entryTitle.disabled = true;
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Loading...';
        }

        // Fetch entry data
        const response = await fetch(window.location.pathname, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''
            },
            body: `entry_id=${entryId}`
        });

        if (!response.ok) {
            throw new Error('Failed to load entry');
        }

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.error || 'Failed to load entry');
        }

        const entry = data.entry;

        // Update current entry tracking
        currentEntryId = entry.id;

        // Update UI
        if (entryTitle) {
            entryTitle.value = entry.title;
            entryTitle.disabled = false;
        }

        // Update editor content
        if (window.editorJSService && window.editorJSService.isReady()) {
            await window.editorJSService.setContent(JSON.parse(entry.content));
        }

        // Update active state in sidebar
        document.querySelectorAll('.entry-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-entry-id="${entryId}"]`).classList.add('active');

        // Reset save button
        if (saveBtn) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Save';
            saveBtn.classList.remove('btn-warning');
            saveBtn.classList.add('btn-success');
        }

        // Update original content for change detection
        originalContent = entry.content;

    } catch (error) {
        console.error('Failed to load entry:', error);
        showErrorMessage('Failed to load entry content');

        // Reset UI state
        const entryTitle = document.getElementById('entry-title');
        const saveBtn = document.getElementById('save-btn');
        if (entryTitle) entryTitle.disabled = false;
        if (saveBtn) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Save';
        }
    }
}

function handleContentChange() {
    // Update save button to indicate changes
    const saveBtn = document.getElementById('save-btn');
    if (saveBtn) {
        saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Save*';
        saveBtn.classList.remove('btn-success');
        saveBtn.classList.add('btn-warning');
    }
}

async function handleDashboardSave() {
    const saveBtn = document.getElementById('save-btn');
    const titleInput = document.getElementById('entry-title');

    if (!currentEntryId) {
        showErrorMessage('No entry selected');
        return;
    }

    if (!window.editorJSService.isReady()) {
        showErrorMessage('Editor is not ready. Please wait and try again.');
        return;
    }

    try {
        // Show saving state
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';
        }

        // Get editor content
        const content = await window.editorJSService.getContent();

        // Get title
        const title = titleInput ? titleInput.value.trim() : '';

        if (!title) {
            showErrorMessage('Please enter a title for your entry.');
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Save*';
            }
            return;
        }

        // Prepare data for API
        const entryData = {
            title: title,
            content: JSON.stringify(content)
        };

        // Save via API
        const response = await fetch(`/api/entries/${currentEntryId}/`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''
            },
            body: JSON.stringify(entryData)
        });

        if (response.ok) {
            const result = await response.json();
            console.log('Entry saved successfully:', result);

            // Update original content for change detection
            originalContent = JSON.stringify(content);

            // Reset save button
            if (saveBtn) {
                saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Saved!';
                saveBtn.classList.remove('btn-warning');
                saveBtn.classList.add('btn-success');
                setTimeout(() => {
                    saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Save';
                }, 2000);
            }

            // Show success message
            showSuccessMessage('Entry saved successfully!');
        } else {
            const error = await response.json();
            console.error('Save failed:', error);
            showErrorMessage('Failed to save entry: ' + (error.detail || 'Unknown error'));
        }

    } catch (error) {
        console.error('Save failed:', error);
        showErrorMessage('Failed to save journal entry. Please check your content and try again.');
    } finally {
        // Reset button state
        if (saveBtn) {
            saveBtn.disabled = false;
        }
    }
}

function showSuccessMessage(message) {
    showToast(message, 'success');
}

function showErrorMessage(message) {
    showToast(message, 'error');
}

function showToast(message, type = 'info') {
    // Create a temporary toast notification
    const toastColors = {
        success: 'bg-success',
        error: 'bg-danger',
        info: 'bg-primary'
    };

    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white ${toastColors[type]} border-0 position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi ${type === 'success' ? 'bi-check-circle' : type === 'error' ? 'bi-exclamation-triangle' : 'bi-info-circle'} me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    document.body.appendChild(toast);

    // Initialize Bootstrap toast
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    // Auto remove after 3 seconds
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
        }
    }, 3000);
}

function deleteEntry(entryId) {
    if (confirm('Are you sure you want to delete this entry?')) {
        fetch(`/api/entries/${entryId}/`, {
            method: 'DELETE',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''
            }
        }).then(response => {
            if (response.ok) {
                location.reload();
            } else {
                showErrorMessage('Failed to delete entry');
            }
        });
    }
}

// Add hover effect for entry options
document.addEventListener('DOMContentLoaded', function() {
    // Add hover listeners to entry items
    document.querySelectorAll('.list-group-item').forEach(item => {
        item.addEventListener('mouseenter', function() {
            const optionsBtn = this.querySelector('.entry-options');
            if (optionsBtn) {
                optionsBtn.style.opacity = '1';
            }
        });

        item.addEventListener('mouseleave', function() {
            const optionsBtn = this.querySelector('.entry-options');
            if (optionsBtn) {
                optionsBtn.style.opacity = '0';
            }
        });
    });
});
</script>
{% endblock %}